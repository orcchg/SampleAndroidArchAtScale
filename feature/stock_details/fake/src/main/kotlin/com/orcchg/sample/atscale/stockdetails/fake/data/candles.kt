package com.orcchg.sample.atscale.stockdetails.fake.data

import com.orcchg.sample.atscale.core.model.money
import com.orcchg.sample.atscale.stockdetails.api.Candle

internal val mapCandles by lazy(LazyThreadSafetyMode.NONE) {
    mutableMapOf<String, List<Candle>>().apply {
        put("GOOGL", GOOGL.m1)
        put("AAPL", AAPL.m1)
    }
}

object AAPL {
    // on 9th Mar'21 14:09:59 - 15:09:59
    val m1 by lazy(LazyThreadSafetyMode.NONE) {
        val closePrices = listOf(119.12, 119.08, 119.14, 119.19, 119.06, 119.1, 118.9, 118.87, 118.93, 118.95, 119.01, 118.99, 118.88, 118.88, 118.72, 118.67, 118.84, 118.7, 119.11, 119.04, 118.99, 119.29, 118.93, 118.86, 119.34, 119.36, 119.34, 119.4, 119.4, 119.45, 119.38, 119.16, 118.96, 118.89, 118.93, 119.06, 119.15, 119.3, 119.36, 119.43, 119.29, 119.24, 119.32, 119.7, 119.88, 119.94, 119.93, 119.99, 120.38, 120.27, 120.45, 120.57, 120.63, 120.67, 120.73, 120.65, 120.74, 120.57, 120.52, 120.54)
        val maxPrices = listOf(119.13, 119.12, 119.14, 119.19, 119.19, 119.1, 119.09, 119.04, 119, 118.97, 119.1, 119.03, 119, 118.91, 118.871, 118.8, 118.89, 118.89, 119.18, 119.16, 119.67, 119.3, 119.37, 119.14, 119.34, 119.43, 119.45, 119.45, 119.49, 119.46, 119.58, 119.38, 119.23, 118.96, 119.1, 119.12, 119.3, 119.32, 119.36, 119.45, 119.47, 119.3, 119.32, 119.73, 119.88, 120.02, 120.07, 120.04, 120.38, 120.48, 120.54, 120.59, 120.68, 120.71, 120.79, 120.89, 120.79, 120.75, 120.63, 120.75)
        val minPrices = listOf(119.09, 119.08, 119.07, 119.1, 119.06, 119.04, 118.89, 118.87, 118.87, 118.91, 118.97, 118.98, 118.88, 118.81, 118.72, 118.63, 118.68, 118.7, 118.69, 118.98, 118.89, 118.88, 118.92, 118.83, 118.8, 119.28, 119.28, 119.28, 119.28, 119.26, 119.37, 119.12, 118.93, 118.79, 118.86, 118.93, 119.06, 119.04, 119.16, 119.26, 119.26, 119.16, 119.11, 119.33, 119.5, 119.85, 119.845, 119.83, 120, 120.26, 120.27, 120.45, 120.52, 120.53, 120.65, 120.65, 120.65, 120.54, 120.46, 120.48)
        val openPrices = listOf(119.09, 119.12, 119.08, 119.14, 119.18, 119.05, 119.09, 118.91, 118.87, 118.94, 118.97, 119.03, 118.99, 118.86, 118.87, 118.74, 118.69, 118.86, 118.69, 119.15, 119.01, 119.01, 119.3, 118.94, 118.86, 119.33, 119.36, 119.35, 119.4, 119.4, 119.46, 119.38, 119.16, 118.96, 118.88, 118.94, 119.06, 119.15, 119.29, 119.36, 119.44, 119.29, 119.24, 119.33, 119.71, 119.88, 119.95, 119.93, 120, 120.38, 120.28, 120.45, 120.57, 120.635, 120.67, 120.73, 120.66, 120.74, 120.58, 120.53)
        val ts = listOf(1615299000L, 1615299060L, 1615299120L, 1615299180L, 1615299240L, 1615299300L, 1615299360L, 1615299420L, 1615299480L, 1615299540L, 1615299600L, 1615299660L, 1615299720L, 1615299780L, 1615299840L, 1615299900L, 1615299960L, 1615300020L, 1615300080L, 1615300140L, 1615300200L, 1615300260L, 1615300320L, 1615300380L, 1615300440L, 1615300500L, 1615300560L, 1615300620L, 1615300680L, 1615300740L, 1615300800L, 1615300860L, 1615300920L, 1615300980L, 1615301040L, 1615301100L, 1615301160L, 1615301220L, 1615301280L, 1615301340L, 1615301400L, 1615301460L, 1615301520L, 1615301580L, 1615301640L, 1615301700L, 1615301760L, 1615301820L, 1615301880L, 1615301940L, 1615302000L, 1615302060L, 1615302120L, 1615302180L, 1615302240L, 1615302300L, 1615302360L, 1615302420L, 1615302480L, 1615302540L)
        val volumes = listOf(30712L, 17120L, 26855L, 32212L, 24037L, 18018L, 34400L, 35393L, 27901L, 11191L, 26732L, 13792L, 23309L, 22707L, 34697L, 79055L, 66493L, 36665L, 105291L, 68286L, 3248072L, 869830L, 765363L, 647722L, 719322L, 744238L, 554226L, 537558L, 695511L, 503922L, 766286L, 626864L, 648107L, 620953L, 545353L, 488765L, 548069L, 515333L, 405355L, 346953L, 437665L, 448079L, 372857L, 766008L, 867356L, 990366L, 642107L, 617759L, 727788L, 720268L, 793926L, 475252L, 463881L, 400210L, 569088L, 873471L, 452051L, 483063L, 498590L, 516948L)
        filler(openPrices, maxPrices, minPrices, closePrices, Candle.Resolution.m1, volumes, ts)
    }
}

object GOOGL {
    // on 9th Mar'21 14:09:59 - 15:09:59
    val m1 by lazy(LazyThreadSafetyMode.NONE) {
        val closePrices = listOf(2052, 2049.61, 2047.09, 2047.735, 2051.58, 2055.49, 2056.65, 2054.53, 2051.69, 2052.93, 2049.01, 2046.99, 2048.2, 2045.89, 2041.75, 2042.49, 2042.43, 2042.09, 2044.33, 2042.68, 2042.13, 2045.39, 2045.66, 2053.51, 2055.71, 2055.205, 2056.79, 2059.75, 2057.44, 2058, 2061.86, 2058.45, 2058.06, 2059.04, 2061.3, 2061.51, 2060.07, 2063.5, 2058.25, 2058.69, 2057.7, 2060.08)
        val maxPrices = listOf(2052, 2050.5, 2053.75, 2049.15, 2053.3, 2057.46, 2057.88, 2056.64, 2054.17, 2054.74, 2052.19, 2048.78, 2049.68, 2045.89, 2045.29, 2042.49, 2043.75, 2043.37, 2044.33, 2046.11, 2043.41, 2045.39, 2046.51, 2054.73, 2057.33, 2055.78, 2057.05, 2059.75, 2059.48, 2058.81, 2061.86, 2062.46, 2058.835, 2060.11, 2061.3, 2061.68, 2061.975, 2063.5, 2062.59, 2060, 2057.7, 2060.82)
        val minPrices = listOf(2052, 2049.61, 2046.73, 2042.22, 2049.79, 2051.605, 2054.6, 2054.53, 2050.25, 2051.055, 2049.01, 2046.99, 2048.2, 2045.8, 2041.69, 2040, 2042.29, 2040.13, 2043.43, 2042.6, 2042.13, 2040.86, 2044.7, 2045.1, 2054.08, 2054.03, 2055.78, 2057.1, 2056.8, 2057.61, 2058.88, 2058.45, 2057, 2058.19, 2059.53, 2060.58, 2059.71, 2063.31, 2058.25, 2058.66, 2057.7, 2058.74)
        val openPrices = listOf(2052, 2050.5, 2051.13, 2043.5, 2050.02, 2052.7, 2055.66, 2056.64, 2054.12, 2051.055, 2052.19, 2048.48, 2049.68, 2045.8, 2045.29, 2040.22, 2043.34, 2043.28, 2043.43, 2043.28, 2043.41, 2041.48, 2045.86, 2045.1, 2054.08, 2055.56, 2055.78, 2057.1, 2059.48, 2057.73, 2059.29, 2062.46, 2058.705, 2058.19, 2059.72, 2061.355, 2061.29, 2063.5, 2062.2, 2059.18, 2057.7, 2058.74)
        val ts = listOf(1615299360L, 1615300080L, 1615300200L, 1615300260L, 1615300320L, 1615300380L, 1615300440L, 1615300500L, 1615300560L, 1615300620L, 1615300680L, 1615300740L, 1615300800L, 1615300860L, 1615300920L, 1615300980L, 1615301040L, 1615301100L, 1615301160L, 1615301220L, 1615301280L, 1615301340L, 1615301400L, 1615301460L, 1615301520L, 1615301580L, 1615301640L, 1615301700L, 1615301760L, 1615301820L, 1615301880L, 1615301940L, 1615302000L, 1615302060L, 1615302120L, 1615302180L, 1615302240L, 1615302300L, 1615302360L, 1615302420L, 1615302480L, 1615302540L)
        val volumes = listOf(567L, 3953L, 46323L, 9429L, 11989L, 18454L, 7820L, 4575L, 9145L, 6547L, 5916L, 4017L, 5926L, 3879L, 6984L, 7803L, 8594L, 10418L, 4602L, 8034L, 3054L, 6243L, 11140L, 13832L, 8162L, 7718L, 5220L, 6141L, 10280L, 8001L, 7852L, 10536L, 5176L, 4543L, 6703L, 3351L, 7273L, 4207L, 5034L, 4461L, 968L, 4453L)
        filler(openPrices, maxPrices, minPrices, closePrices, Candle.Resolution.m1, volumes, ts)
    }
}

internal fun filler(
    openPrices: List<Number>,
    maxPrices: List<Number>,
    minPrices: List<Number>,
    closePrices: List<Number>,
    resolution: Candle.Resolution,
    volumes: List<Long>,
    ts: List<Long>
): List<Candle> =
    mutableListOf<Candle>().apply {
        val size = listOf(openPrices.size, maxPrices.size, minPrices.size, closePrices.size, volumes.size, ts.size).minOrNull()
            ?: return@apply

        for (i in 0 until size) {
            val candle = Candle(
                ticker = "AAPL",
                openPrice = openPrices[i].toDouble().money(),
                maxPrice = maxPrices[i].toDouble().money(),
                minPrice = minPrices[i].toDouble().money(),
                closePrice = closePrices[i].toDouble().money(),
                resolution = resolution,
                volume = volumes[i],
                ts = ts[i]
            )
            add(candle)
        }
    }
